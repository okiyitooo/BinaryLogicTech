.class files can be run on any platform 

 

Jdk: java development kit(lets you write java code, has some development tools as well as compilers (java c.(java compiler))) 

→ 

jre: java runtime environment(within jdk and has all libraries needed for running java code(provides an environment for java basically))→ 

Jvm: java virtual machine(reads the code line by line)→ 

Jit: just in time compiler(suppose there is a function that has been called 1000 times in your program, it tells jvm it does not have to convert the function to byte code each time, and instead take the byte code from itself ) 

 

Class loader(loads classes(loading: converting variable to binary data)(linking: initialization and replacement of references to values)) 

 

Garbage collector(if jvm finds there are unreferenced variables(lying in memory but nothing is pointing to them) these variables are eligible for garbage collection) 

 

(Jvm can't run a main class if it's not public) 

(static keyword binds the call of a class not to any object that has been created but the class itself as opposed to the needing to create an object before calling the method which is why the main method must be static) 

 

(Lossy conversion is when you lose data while casting) 

 
java is platform independent (run on any device) because
the byte code(.class) file on any system as it is machine readable since you don't have to compile it again.
 
JDK - Java Development Kit -> contains
	- JRE - Java Runtime Environment -> contains
	- JVM - Java Virtual Machine -> contains
	- JIT - Just in Time Compiler
 
JDK - lets you write java code. Plus has development tools and compiler called javaC to write code.
 
JRE - has library to run java code.
 
JVM - reads the code line by line
 
JIT - saves machine code for all the work done so far as to not repeat conversion again and again
 
class loader - loading(converts code to binary data)
             - linking(links data to referenced data)
 
garbage collection - manages memory (ex= if there is a data that does not have any reference it is eligible for garbage collection) at the end of the program everything will go to garbage collection.

Heap vs stack
If you declare a variable, it’s reference is stored in the stack, while the value is stored in the heap
In java everything primitive is passed by value in functions
SCP = *A singleton* string constant pool, (when a  string is assigned to a variable, JVM checks to see if it is in the pool, if it is already in the pool, the variable simply points to the string as opposed to making a new string. If a string is created without a reference, it does not join the pool) “increases efficiency”
Garbage collector collects values without references
String = Strings are immutable because if you modify one that is being pointed to by another, the other would be affected

Runtime polymorphism is when jvm decides which function to run at runtime based on parameter difference

If there’s no modifier before a variable type, its modifier is default (this limits access to only inside the class




Class
Package
Subclass
(same pkg)
Subclass
(diff pkg)
World
public
+
+
+
+
+
protected
+
+
+
+


default
+
+
+




private
+









+ : accessible

Control Flow of static
1- static blocks methods and variables are identified
2-  static things  are executed and assigned
3-  main is executed

*Compile time polymorphism
Encapsulation-hide details 

heiarchical enheritance				vs			multiple inheritance 
-multiple classes extend the same class			one class extends multiple classes


Abstraction – hide complexity (Abstract Classes and Interfaces)

Abstract classes						vs						Interface
at least one abstract method(method with no implementation)		all methods are abstract
*abstract method(abstract returntype name();)				no need to write abstract keyword in interfaces
"extends"								implements
child class								classes implementing the interface
only one class can be extended						more than one can be implemented
cant have default methods						from java 8 onlwards, interfaces were allowed to have static and default methods
									by default all attributes of an interface have the public modifier
									if all methods of its classes require re-implementing an interface should be used
A functional interface only has one abstract method

Hashcode is an integervalue that is unique for every object.

If two objects are equal, then their hashcodes must be equal as well however they do not need to be equal in order to have the same hashcode

a final variable is constant
a final method cannot be overriden
a final class can not be extended

final keyword can optimize performance since the compiler knows the variable wont be changed
It can also be good for security as it ensures the data cannot be changed

Exceptions					vs	Errors
can be handled						cant
checked(compiletime)	unchecked(runtime)	

try-catch-finally

finally brackets always run regardless of if the exception is caught

(Exception).printStackTrace() shows all the subsequent calls leading up to the exception.


Wrapper Classes
Classes that represent primitive classes
Unboxing is the conversion of a wrapper class to a priimitive type
autoboxing is the conversion of primitive types to wrapper classes

		Iterable(Interface)
			|
		Collection(Interface)
			|
_________________________________________________
|			|			|
List(Interface)		Queue(Interface)	Set(Interface)->HashSet->LinkedHashSeet
|			|			|
ArrayList		Deque			SortedSet(Interface)
LinkedList					|
Vector(SynchronizedArrayList)->Stack		NavigableSet(Interface)
						|
						TreeSet

Storing retrieving and manipulating data-> data structure


ArrayList(Contiguous memory allocation)
Pros(LinkedList)			Cons(Inefficient)
RandomAccess				Insertion(in beginning and middle),deletion

LinkedList(no Contigious memory allocation)
Pros					Cons
Insertion,Deletion			RandomAccess

BufferOverflow Attack, reaching the end of the memory? and adding your script there

Deque
Pros								Cons
Constant  insertion and deletion from end and beginning		
Random Access

Set -> Table of hashes(Hashtable)
TreeSet->Ordered set(Ordered in ascending order)
HashSet
LinkedHashSet->Ordered HashSet(ordered by insertion) ->Linked table of hashes (HashTable and LinkedList)

Stack
Pro						Cons
Constant insertion				Linear deletion

Nov 8th

listIterators can iterate backwards
Collections make changing data structures a lot easier

Deque class in java has no "ListIterator)

HashTable is the underline implementation of sets

To sort a Collection by multiple * genres

Collections.sort("collection","Class that implements comparator<Collection type> where it compares the genre you want")

HashMap->Keys are Set


Nov 10th

Project concept ->

Core Java
Scanner Class
JDBC

login prompt
user authentification with database
Entity<Employee>
1. Display all entities
2. Display one entity based on primary key
3. Update any Existing entity
4. Create new Entity
5.  Delete Entity

Nov 13th

JDBC Steps

1. Importing package.
2. loading driver and registering it.
3. Establishing the connection.
4. Creating the statement.
5. Creating/Accepting the ResultSet.
6. Processing the ResultSet.
7. Closing the statement and Connection.


CRUD - create read update and delete

November 15th 

a thread is a part of a code
when you create a thread it's in the new state
when it's been asked to do something
when it's running it's in running state
it could be in the waiting or sleep state if

Thread Class ->two methods
callable and runnable interface
start() is required for the thread to act like a thread

November 16th

Lambda expressions dont need return types, access modifier, or object name, eg ()-> {}
Consumer interface is used for lambdas that consume parameters(return nothing)
Supplier interface returns the T
Predicate tests t

Valuable -> @FunctionalInterfaces
	Comparable & Comparator	->Comparison
	Runnable	
		Callable	->Thread
	Predicate	}
	Consumer	}->lambda
	Supplier	}


Nov 17th

Streams never modify the original array

Intermediate operations -> (filter,reduce,map,etc)

Optional<T> is used to check if a value is present or not, it saves you from null pointer exceptions


Nov 21st

You can Use Snyk to check 

Trees have no pointer from kid to parent
Perfect binary tree; every node has 2 or no kids;

Graphs can have cycles trees would never have one 

Queue for breadth first

Post order -> accessing data after recursive call
Pre Order -> acessing data before the call(recursive)

Nov 22

In a graph, disconnected graphs are called components

Nov 27

3 steps To implement spring core 

1. Configuration
2. Dependency Injector ->Parse/read configurations and then understands what to do
3. Use and get required beans(spring objects)

Configuration:

1. XML Configuration
2. Java Configuration
3. Annotation


XML Configuration eg,

<beans>
//making a pedigree object using the default constructor
<bean id = 'pedigree' class = "com.blit.Pedigree"<!--imaginary class location-->>
//beans in beans
</bean>
//inject pedigree into a dog
<bean id = 'dog' class = 'com.blit.Dog'>
	<constructor-args ref = 'pedigree'>
</bean>
//inject dog into dogowner
<bean id = 'dog_owner' class = 'com.blit.DogOwner'>
	<constructor-args reg = 'dog'>
</bean>
</beans>


creating a container->
BeanFactory beanFactory = new XMLBeanFactory(new ClassPath(xml configuration file path))
	Here's what happens->
		1. it reads the xml file and validates it
		2. creates logical memory partitions in the jvm if valid
		3. loads the spring configuration file and places the meta data in the partitions
		4. returns beanFactory reference

creating an object from an xml reference
DogOwner dogOwner = beanFactory.getBean("DogOwner");
	Here's what happens->
		1. beanFactory goes to IOC container to look for the bean
		2. if found, the class name is read and loaded into memory and an instatiation is returned

//IOC is inversion of control

constructur injections are only for mandatory dependencies

XML draWbacks ->

1. Need to learn xml
2. No TypeSafety
3. Poor readability
4. Maintenance

Nov 30

If a scope is not defined for a bean, it's scope is automatically singleton

Spring MVC - Model View Controller

Model -holds data
View - Shows something to the end user
Controller - Includes URL mapping

Used to develop java web apps 
Based on MVC design pattern
Uses feautures of spring core (IOC and DI)

Client(Web browser) ----> request ----> FrontController(DispatchServlet) ----> Controller ---->View template(JSP) ---->response ---->client


Steps for Spring MVC configuration
1. Add web.xml file
2. configure Spring mvc dispatcher servlet
3. setup url mapping to spring mvc dispatcher servlet
4. add spring-mvc-demo-servlet.xml(WEB-INF/spring-mvc-demo-servlet.xml)
5. Add support for spring component scanning
6. Add support for conversion and validation of the code

Dec 5th

orn = object relational mapping
jpa = java persistence api


Dec 6th

hql = hibernate query language

Dec 13th

REST API is a combination of the kind of the request and the url

Dec 14th

CSRF -> Cross site request forgery

Monolithic application: an application in which all changes are made everywhere in order to make an update.

Constructor injections are used when a dependency is necessary

Microservice is a single independent deployable thing: if you have to make changes to other parts of a jar, you dont have to affect other parts of the jar

how to make a class(service) the primary representator of an interface (springboot

ordered by priority:

	@Autowired
	@Qualifier("<Class name>")

	@Primary -> at the top of class implementation

	name your autowired object the lowercase version of the name of the class


Project requirement

	-pointCutExpressions
	-DTOS
	-Log4J
